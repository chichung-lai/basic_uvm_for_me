49a50
>     //`uvm_object_utils_end
51d51
<     int item_num = 10;    
56,59d55
<     function void pre_randomize();
<         uvm_config_db#(int)::get(m_sequencer, "", "item_num", item_num);
<     endfunction
< 
64c60
<         repeat(item_num)begin
---
>         repeat(10)begin
91,92d86
<     virtual dut_interface m_vif;   //imp DUT  new
< 
97,239d90
<     virtual function void build_phase(uvm_phase phase);        //new
<         super.build_phase(phase);
< 	uvm_config_db#(virtual dut_interface)::get(this,"","vif",m_vif);   //connect DUT
<     endfunction
<     
<     virtual task pre_reset_phase(uvm_phase phase);//new
<         super.pre_reset_phase(phase);
< 	`uvm_info("TRACE",$sformatf("%m"),UVM_HIGH)
< 	phase.raise_objection(this);
< 	m_vif.driver_cb.frame_n <= 'x;
< 	m_vif.driver_cb.valid_n <= 'x;
< 	m_vif.driver_cb.din     <= 'x;
< 	m_vif.driver_cb.reset_n <= 'x;
< 	phase.drop_objection(this);
<     endtask
<     
<     virtual task reset_phase(uvm_phase phase);//new
<         super.reset_phase(phase);
< 	`uvm_info("TRACE",$sformatf("%m"),UVM_HIGH)
< 	phase.raise_objection(this);
< 	m_vif.driver_cb.frame_n <= '1;
< 	m_vif.driver_cb.valid_n <= '1;
< 	m_vif.driver_cb.din     <= '0;
< 	m_vif.driver_cb.reset_n <= '1;
< 	repeat(5)@(m_vif.driver_cb);
< 	m_vif.driver_cb.reset_n <= '0;
< 	repeat(5)@(m_vif.driver_cb);
< 	m_vif.driver_cb.reset_n <= '1;
< 	phase.drop_objection(this);
<     endtask
< 
<     virtual task run_phase(uvm_phase phase);
<         logic [7:0] temp;
< 	repeat(15)@(m_vif.driver_cb);
<         forever begin
<             seq_item_port.get_next_item(req);
<             `uvm_info("DRV_RUN_PHASE", req.sprint(), UVM_MEDIUM) //print
< 	    //send address
< 	    m_vif.driver_cb.frame_n[req.sa] <= 1'b0;
< 	    for(int i=0; i<4; i++)begin
<                m_vif.driver_cb.din[req.sa] <= req.da[i];
< 	       @(m_vif.driver_cb);
< 	    end
< 	    //send pad
< 	    m_vif.driver_cb.din[req.sa] <= 1'b1;
< 	    m_vif.driver_cb.valid_n[req.sa] <= 1'b1;
< 	    repeat(5)@(m_vif.driver_cb);
< 	    //send payload
< 	    while(!m_vif.driver_cb.busy_n[req.sa])@(m_vif.driver_cb);
< 	    foreach(req.payload[index])begin
< 	      temp = req.payload[index];
< 	      for(int i=0; i<8; i++)begin
< 		m_vif.driver_cb.din[req.sa]     <= temp[i];
< 		m_vif.driver_cb.valid_n[req.sa] <= 1'b0;
< 		m_vif.driver_cb.frame_n[req.sa] <= ((req.payload.size()-1) == index) && (i==7);
< 		@(m_vif.driver_cb);
< 	      end
< 	    end
<             m_vif.driver_cb.valid_n[req.sa] <= 1'b1;
<             seq_item_port.item_done();         
<         end
<     endtask
< endclass
< 
< 
< 
< 
< //monitor
< 
< class my_monitor extends uvm_monitor;
< 
<     `uvm_component_utils(my_monitor)
< 
<     function new(string name ="", uvm_component parent);
<         super.new(name, parent);
<     endfunction
<      
< //    virtual task reset_phase(uvm_phase phase);
< //      #50
< //      `uvm_info("MON_RESET_PHASE","NOW Monitor reset_phase running !",UVM_MEDIUM)
< //    endtask
< 
<     virtual task run_phase(uvm_phase phase);
<         forever begin
<             `uvm_info("MON_RUN_PHASE", "Monitor run!", UVM_MEDIUM)
<             #100;
<         end
<     endtask
< endclass  
< 
< 
< 
< //agent
< 
< class master_agent extends uvm_agent;
< 
<     `uvm_component_utils(master_agent)
< 
<     my_sequencer m_seqr;
<     my_driver m_driv;
<     my_monitor m_moni;
<     bit if_active = 1;    
< 
<     function new(string name="", uvm_component parent);
<         super.new(name, parent);
<     endfunction
< 
<     virtual function void build_phase(uvm_phase phase);
<         super.build_phase(phase);
<         if(is_active == UVM_ACTIVE) begin
<             m_seqr = my_sequencer::type_id::create("m_seqr", this);
<             m_driv = my_driver::type_id::create("m_driv", this);
<         end
<         m_moni = my_monitor::type_id::create("m_moni", this);
<     endfunction
< 
<     virtual function void connect_phase(uvm_phase phase);
<         if (is_active == UVM_ACTIVE)
<             m_driv.seq_item_port.connect(m_seqr.seq_item_export);
<     endfunction
< 
< 
< endclass
< 
< 
< 
< 
< //env
< 
< class my_env extends uvm_env;
< 
<     `uvm_component_utils(my_env)
< 
<     master_agent m_agent;
< 
<     function new(string name="", uvm_component parent);
<         super.new(name, parent);
<     endfunction
< 
<     virtual function void build_phase(uvm_phase phase);
<     
< 
< 
287a139
>     bit if_active = 1;    
337a190
> 
355c208
<         uvm_config_db # (int)::set(this,"*.m_seqr","item_num",20);
---
> 
443a297,301
> 
> 
> 
> 
> 
